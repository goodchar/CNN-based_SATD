eatm demand create metadata needs to depend on processing mode
dms should we let this exception out \?
i do n't know if we should be run this deferred because we might have to give the editor a chance to process the viewer update events and hence to update the views first
dms why not this \? new subprogressmonitor \( progressmonitor , 1 \) \)
this is a big festering hack to make the images the right size from the start
revisit remove this code store port value as string instead of integer
dms do a better job with specific exceptions \? just use chained runtimeexceptions \?
fb tbd filter out volatile and other inappropriate links \?
todo specialize this to return a resource locator for messages specific to this validator ensure that you remove generated or mark it generated not
this is a kludge to deal with enumerators , which crash the doswitch
hack reading encoding
todo i'm concerned that folders will often return 401 or even 403 so should we consider something to exist even though access if unauthorized or forbidden \?
todo remove this bogus empty line
todo what about the instance type name and the fact that we should be matching its type argument structure \? if they match so far , we must assume they are okay and then check all the arguments
this is copied from itemprovideradapterfactory
dms factor this into a method \? use a non static subclass \?
todo processing instructions are not sent to recordvalues
is this an error \? \? \?
todo deprecate \( since getpluginclass \( \) is no longer called \)
todo so what should be the etype be now \?
tbd return super classes of classes in this package that come from a delegate package
dms what if eclipse is running , but an invalid facade has been specified \? we still should format code , use encoding ,
eatm in jdk 1 4 there will be an indexof on stringbuffer
ensure that this race condition is thread safe it does n't matter who wins the race
todo translation
todo fix the space above
unused \?
dms this does n't really produce nice output
line comments at the end of annotations are not a part of the range of annotation todo is not including line comments at the end of annotations a bug \?
call the workaround
todo comments are not sent to recordvalues
if the delegate uri can be handled as a file , we 'll hope that renaming it will be really efficient
revisit remove this code
eatm this would be wrong
the label is not used
i do n't know if this should be run this deferred because we might have to give the editor a chance to process the viewer update events and hence to update the views first
call workaround
todo update this after old tests pass and then update the old tests to reflect this change
if current char is comma , insert line break after it we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator if targetsourcerangecomputer of astrewrite changes , this logic should change to skip comments see org eclipse emf codegen merge java facade ast commentawaresourcerangecomputer getenumconstantsourcerange \( astnode \)
per schema 1 0 it is not clear if the result returned should be a valid uri for the future if we plant to support iris then it is better not to massage the initialvalue we should thought consider where would be the best way to validate anyuri values el
tbd return \( user selected subset \? \) of referenced packages that contain super classes of classes in this package
assume that it 's an attribute for now it will could become a reference if the type resolves to an eclass
todo factor up into genbaseimpl
if there are multiple variables in declaration , separate this variable fragment into a separate declaration
todo handle situation when astjnode is removed \( compilationunit is null \)
motif kludge we would get something random instead of null
eatm call the deprecated method which does the same thing but might have an override in older code
todo binary incompatibility an old override must override putall
second alternative should be getmodelproject \( \) \?
tbd rethink where exactly some of the following methods belong \( genmodel or genpackage \)
this is a fall back , however , this should never be called
todo we should generate this
todo factor up into genbaseimpl \?
the eannotations and egenerictype are possible containment references we 'll move them instead of copying
eatm must fix isset bits
do nothing for now , and avoid propagating the exception how should builders handle cancel \?
dms this is totally untested
todo this is really quite attrocious since there is code that will assume an iterator that returns strings !
note registry based authority is being removed from a new spec for uri which would obsolete rfc 2396 if the spec is added to xml errata , processing of reg name needs to be removed mrglavas
eatm kind of hacky
this runs the options , and shows progress \( it appears to be a bad thing to fork this onto another thread \)
temporary structure to hold node 's attributes \+ namespaces in scope
todo this is faster than many charat \( \) calls
only file scheme uris will be re encoded if a uri was decoded in the workaround above , and platform resolve \( \) did n't return a file scheme uri , then this will return an decoded uri
bug 124306 we should rely on xmlcalendar to normalize dave value , to ensure that all date value fields are taken into account
todo ignore for now
this functionality should eventually go away , as it is replaced by model exporters we 'll just delegate to the deprecated genpackage method the monitor is n't used , so we wo n't pass it
note that the way they are sorted , the values of index i \+ \+ always increase , so the objects are added from right to left in the list eatm todo we could make this more efficient by grouping the adds when indices increment by one , so that a single grouped notification would result
bubble sort why \? in many cases , this ranges has few elements
dms handle this well
todo handle class cast exception better
fb tbd can we come up with a better algorithm for choosing the default label feature \?
